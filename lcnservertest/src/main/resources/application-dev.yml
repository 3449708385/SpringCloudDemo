server:
  port: 8033
  #servlet:
   # context-path: lcn-server-test  #默认没有项目名，你可以加
spring:
  application:
    name: lcn-server-test

#数据库配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    #因为com.mysql.cj.jdbc.Driver的引擎是在mysql-connector-java 6以上版本才改的
    #driver-class-name: com.mysql.cj.jdbc.Driver
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/test02?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&useSSL=false&serverTimezone=UTC
    username: root
    password: Alex2017!
  # 配置初始化大小、最小、最大
    initialSize: 5
    minIdle: 5
    maxActive: 20
  # 配置获取连接等待超时的时间
    maxWait: 60000
  # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
  # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 30000
    validationQuery: SELECT 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
   # 打开PSCache，并且指定每个连接上PSCache的大小。如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。
    poolPreparedStatements: false
    maxPoolPreparedStatementPerConnectionSize: 20
  # 配置监控统计拦截的filters
    filters: stat
  # schema.sql中一般存放的是建表语句,看情况使用
    #schema: classpath:schema.sql
  # data.sql中一般存放的是需要插入更新等sql语句,看情况使用
    #data: classpath:data.sql

#sql logs
mybatis:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  config-locations: classpath:mybatis/mybatis-config.xml
  mapper-locations: classpath:mybatis/mapper/*.xml

 #redis
# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
  redis:
      database: 0
      timeout: 2000ms
# Redis服务器地址
      host: 127.0.0.1
# Redis服务器连接端口
      port: 6379
# Redis服务器连接密码（默认为空）
      password: Alex2017!
# 连接池最大连接数（使用负值表示没有限制）
      pool:
        max-active: 8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1
# 连接池中的最大空闲连接
        max-idle: 8
# 连接池中的最小空闲连接
        min-idle: 0
      #cluster:
      #  max-redirects: 10
       # nodes: 127.0.0.1:6080
# 连接超时时间（毫秒）
logging:
  level:
    com.mgp.customer.*.mapper : debug
    com.codingapi: debug

  #sleuth-zipkin
  zipkin:
    base-url: http://localhost:7001
  sleuth:
    sampler:
      percentage: 1.0

eureka:
  server:
    # 测试时关闭自我保护机制，保证不可用服务及时踢出
    enable-self-preservation: false
    eviction-interval-timer-in-ms: 60000  #清理间隔（毫秒）
    #peerNodeReadTimeoutMs: 200000
    #peerNodeConnectTimeoutMs: 60000
    #https://blog.csdn.net/qq_26440803/article/details/83113037
  instance:
    hostname: localhost
    prefer-ip-address: true
    ip-address: 127.0.0.1
    instance-id: ${spring.application.name}:${server.port} #指定实例id
    lease-expiration-duration-in-seconds: 30   #续约更新时间间隔
    lease-renewal-interval-in-seconds: 10     #续约到期时间间隔，默认90
    leaseRenewalIntervalInSeconds: 10     #心跳时间
  client:
    registerWithEureka: true  #是否注册自己到eureka服务中，默认不注册
    fetchRegistry: true     #是否从eureka服务中获取注册信息
    serviceUrl:
      # 服务器注册/获取服务器的zone
      #自己注册到eureka那个服务,可注册多个，用，分隔
      defaultZone: http://${eureka.instance.hostname}:8761/eureka/
    eurekaServerConnectTimeoutSeconds: 60
    eurekaServerReadTimeoutSeconds: 60
    # 健康检测问题 https://my.oschina.net/andChow/blog/1939238
    healthcheck:
      enabled: false
      # 如下配置则打开db-health检查
        #db:
         # enabled: true

feign:
  hystrix:
    enabled: true

## tx-manager 配置
#tx-lcn:
 # client:
  #  manager-address: 127.0.0.1:7970
#tx-manager ip(client请求ip)
  #manager:
   # host: 127.0.0.1
# client 请求端口
   # port: 8070
# 心跳检测时间 单位：ms
    #heart-time: 12000
# 事务执行总时间
    #dtx-time: 10000
    #concurrent-level: 128
# 参数延迟删除时间单位ms
  #message:
   # netty:
    #  attr-delay-time: 10000

# 开启日志
  #logger:
   # enabled: true
    #driver-class-name: ${spring.datasource.driver-class-name}
    #jdbc-url: jdbc:mysql://localhost:3306/tx_manager?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
    #username: ${spring.datasource.username}
    #password: ${spring.datasource.password}
#lcn配置
tx-lcn:
  client:
    manager-address: 127.0.0.1:8070
  springcloud:
    loadbalance:
      enabled: true


# e-job
regCenter:
  serverList: 192.168.1.4:2181
  namespace: ejob02