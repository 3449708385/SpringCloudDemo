spring:
  application:
    name: gateway-server #服务名称
  cloud:
    # 设置偏好网段
    inetutils:
      preferred-networks: 127.0.0.
    loadbalancer:
      retry:
        enabled: true
  jackson:
    date-format: yyyy-MM-dd
    joda-date-time-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8

  zipkin:
    enabled: true
    base-url: http://zipkin-dashboard/

 #redis
# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
  redis:
    database: 0
    timeout: 2000ms
# Redis服务器地址
    host: 127.0.0.1
# Redis服务器连接端口
    port: 6379
# Redis服务器连接密码（默认为空）
    password: Alex2017!
# 连接池最大连接数（使用负值表示没有限制）
    pool:
      max-active: 8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
      max-wait: -1
# 连接池中的最大空闲连接
      max-idle: 8
# 连接池中的最小空闲连接
      min-idle: 0
      #cluster:
      #  max-redirects: 10
       # nodes: 127.0.0.1:6080
# 连接超时时间（毫秒）


zuul:
  # routes其实zuul已经实现了反向代理和负载均衡的两个功能了，可能有人这时候就纳闷了，这里不是只是反向代理了吗？
  # 怎么实现负载均衡呢？其实zuul实现负载均衡很简单，使用serviceId进行绑定后，如果有多个相同的serviceid，则会进行轮询的方式进行访问。这个在下文会有具体的结果截图。
  # https://blog.csdn.net/linzhiqiang0316/article/details/85558106
  routes:
    test-service: #用户测试服务，名称随意
      path: /customer/**  #请求过滤规则,这里可以是任意名称，url包含就行，包含跳转到serviceId配置的服务中请求
      serviceId: demo-customer
  host:
    connect-timeout-millis: 10000
    socket-timeout-millis: 60000
  add-host-header: true
  sensitive-headers: Access-Control-Allow-Origin,Access-Control-Allow-Methods
  strip-prefix: true
  ratelimit:
    # 开启限流
    enabled: true
    # 存储方式
    repository: REDIS
    # 限流策略
    policies:
      # 指定限流服务
      test-service:
        # 每个周期内请求次数
        limit: 3
        # 单位时间内允许访问的总时间
        quota: 30
        # 周期时间
        refresh-interval: 60
        # 限流方式 USER 根据用户；ORIGIN 原始请求；URL 请求地址；
        type: ORIGIN
server:
  port: 9001    # 端口号

eureka:
  instance:
    hostname: localhost
    prefer-ip-address: true
    ip-address: 127.0.0.1
    instance-id: ${spring.application.name}:${server.port} #指定实例id
    lease-expiration-duration-in-seconds: 30   #续约更新时间间隔
    lease-renewal--interval-in-seconds: 10     #续约到期时间间隔，默认90
    leaseRenewalIntervalInSeconds: 10     #心跳时间
  client:
    registerWithEureka: true  #是否注册自己到eureka服务中，默认不注册
    fetchRegistry: true     #是否从eureka服务中获取注册信息
    serviceUrl:
      # 服务器注册/获取服务器的zone
      defaultZone: http://${eureka.instance.hostname}:8761/eureka/
    eurekaServerConnectTimeoutSeconds: 60
    eurekaServerReadTimeoutSeconds: 60
    healthcheck:
      enabled: true